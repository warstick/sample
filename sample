import React from 'react'
import PropTypes from 'prop-types'

import {WorkspaceList, SharedBoardsList} from '@gtm-av/av-workspace'
import {filter} from '@gtm-av/js-iterators'

import {NikeFlyout, NikeIcon, NikeScrollbar} from '@gtm-styleguide/react-styleguide'

import {NavSpinner} from './NavSpinner'
import {loadMyWorkspaceTranslations} from './WorkspaceNavigation.resolver'

const goToWorkspace = new WeakMap()

export class WorkspaceDropdown extends React.Component {
  static get contextTypes() {
    return {
      router: PropTypes.object.isRequired
    }
  }

  static get propTypes() {
    return {
      workspaceList: PropTypes.oneOfType([PropTypes.instanceOf(WorkspaceList), PropTypes.instanceOf(SharedBoardsList)]),
      regionId: PropTypes.number.isRequired,
      seasonCode: PropTypes.string.isRequired,
      labelText: PropTypes.oneOfType([PropTypes.object, PropTypes.object]).isRequired
    }
  }

  constructor(...args) {
    super(...args)

    this.state = {
      loaded: false,
      myWorkspaces: [ ],
      displayDropdown: false,
      myWorkspaceOptions: [ ],
      myWorkspaceIcon: 'arrow-down',
      searchedKeyword: '',
      activeClass: ''
    }

    this.toggleDropdown = this.toggleDropdown.bind(this)
    this.updateDropdownOptions = this.updateDropdownOptions.bind(this)
    this.toggleIcon = this.toggleIcon.bind(this)
    this.closeFlyout = this.closeFlyout.bind(this)
  }

  get seasonCode() {
    return this.context.router.params.seasonCode
  }

  getActiveClass() {
    const { router } = this.context
    const { params } = router
    const { workspaceId } = params
    const { workspaceList } = this.props
    const validWorkSpaceId = this.hasWorkSpaceId(workspaceId)

    if (workspaceList instanceof SharedBoardsList && validWorkSpaceId) {
      return 'active-shareBoard-view'
    } else if (workspaceList instanceof WorkspaceList && validWorkSpaceId) {
      return 'active-workspace-view'
    }

    return ''
  }

  hasWorkSpaceId(workspaceId) {
    const { myWorkspaces } = this.state
    const idFound = filter(myWorkspaces, (workspace) => workspace.id === Number(workspaceId))

    return idFound.length > 0
  }

  async componentDidMount() {
    this.mounted = true

    await loadMyWorkspaceTranslations()

    if (this.mounted) {
      this.setState({
        loaded: true
      })

      this.getMyWorkspaces()
    }
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.workspaceList.loadCounter !== this.state.loadCounter) {
      this.getMyWorkspaces().then(() => {
        this.setState({loadCounter: nextProps.workspaceList.loadCounter})
      })
    }
  }

  async getMyWorkspaces() {
    const { seasonCode, workspaceList } = this.props

    await workspaceList.refresh()

    if (this.mounted) {
      const workspaces = workspaceList.getSortedList({seasonCode})

      if (workspaces.length > 0) {
        this.setState({
          myWorkspaces: workspaces,
          myWorkspaceOptions: workspaces,
          isWorkspaceDropDownEmpty: false,
          activeClass: this.getActiveClass()
        })
      }

      else {
        this.setState({
          isWorkspaceDropDownEmpty: true
        })
      }
    }
  }

  render() {
    const { loaded, myWorkspaces, myWorkspaceIcon, activeClass } = this.state

    if (!loaded) {
      return <NavSpinner />
    }

    if (!myWorkspaces.length) {
      return (
        <div className='my-workspace-name-dropdown'>
          <div className='my-workspace-button-name-disabled'>
            {this.props.labelText}
          </div>
        </div>
      )
    }

    return (
      <div className='my-workspace-name-dropdown'>
        <div data-au='my-workspaces-btn' className={`my-workspace-button-name ${activeClass}`} onClick={this.toggleDropdown}>
          {this.props.labelText}
          <NikeIcon value={myWorkspaceIcon} size={24} />
        </div>
        {this.renderFlyout()}
      </div>
    )
  }

  renderFlyout() {
    const { myWorkspaceIcon, displayDropdown } = this.state

    const attrs = {
      dataAu: 'my-workspaces-cont',
      className: 'my-workspace-dropdown',
      autoClose: true,
      direction: myWorkspaceIcon === 'arrow-up' ? 'up' : 'down',
      open: displayDropdown
    }

    return (
      <NikeFlyout {...attrs} ref={(ref) => this.flyout = ref} open={displayDropdown} onOpen={this.toggleIcon} onClose={this.closeFlyout}>
        <NikeScrollbar />
        <div>
          <input data-au='my-workspaces-inp' value={this.state.searchedKeyword} placeholder='Search' type='text' onChange={this.updateDropdownOptions} />
          <NikeIcon value='search' size={35} />
        </div>
        <div className='my-workspace-dropdown-options'>
          {this.displayDropdownOptions(this.state.myWorkspaceOptions)}
        </div>
      </NikeFlyout>
    )
  }

  goToWorkspace(workspace) {
    this.context.router.push(`/my-workspace/${workspace.season.code}/${workspace.primaryRegion.id}/${workspace.id}`)
  }

  displayDropdownOptions(options) {
    return options.map((workspace, index) => {
      if (!goToWorkspace.has(workspace)) {
        goToWorkspace.set(workspace, () => this.goToWorkspace(workspace))
      }

      return (
        <div data-au={`my-workspaces-opt-${workspace.name}`} className='my-workspace-name' key={'my-workspace-option' + index} onClick={goToWorkspace.get(workspace)}>
          {workspace.name}
        </div>
      )
    })
  }

  updateDropdownOptions(event) {
    const { myWorkspaces } = this.state
    const value = event.target.value.toUpperCase()

    this.setState({
      searchedKeyword: event.target.value,
      myWorkspaceOptions: value.length >= 3
        ? filter(myWorkspaces, (workspace) => workspace.name.toUpperCase().includes(value))
        : myWorkspaces
    })
  }

  async toggleDropdown() {
    if (!this.state.displayDropdown) {
      await this.getMyWorkspaces()
    }

    this.setState({ displayDropdown: !this.state.displayDropdown })
  }

  toggleIcon() {
    if (this.flyout.open) {
      this.setState({myWorkspaceIcon: 'arrow-up', searchedKeyword: ''})
    }

    else {
      this.setState({myWorkspaceIcon: 'arrow-down'})
    }
  }
  closeFlyout() {
    this.toggleIcon()
    this.setState({ displayDropdown: false })
  }
}
